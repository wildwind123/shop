// Code generated by ogen, DO NOT EDIT.

package ogenapi

import (
	"time"
)

// Ref: #/components/schemas/Error
type Error struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *Error) GetCode() string {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *Error) SetCode(val string) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val string) {
	s.Message = val
}

func (*Error) productGetRes()  {}
func (*Error) productPostRes() {}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/Product
type Product struct {
	ID          int       `json:"id"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *Product) GetID() int {
	return s.ID
}

// GetName returns the value of Name.
func (s *Product) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *Product) GetDescription() string {
	return s.Description
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Product) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Product) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *Product) SetID(val int) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Product) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *Product) SetDescription(val string) {
	s.Description = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Product) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Product) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

type ProductPostReq struct {
	Name string `json:"name"`
}

// GetName returns the value of Name.
func (s *ProductPostReq) GetName() string {
	return s.Name
}

// SetName sets the value of Name.
func (s *ProductPostReq) SetName(val string) {
	s.Name = val
}

// Merged schema.
type ResGetProduct struct {
	Data       []Product `json:"data"`
	Limit      int       `json:"limit"`
	Offset     int       `json:"offset"`
	Count      int       `json:"count"`
	RequestURI string    `json:"request_uri"`
}

// GetData returns the value of Data.
func (s *ResGetProduct) GetData() []Product {
	return s.Data
}

// GetLimit returns the value of Limit.
func (s *ResGetProduct) GetLimit() int {
	return s.Limit
}

// GetOffset returns the value of Offset.
func (s *ResGetProduct) GetOffset() int {
	return s.Offset
}

// GetCount returns the value of Count.
func (s *ResGetProduct) GetCount() int {
	return s.Count
}

// GetRequestURI returns the value of RequestURI.
func (s *ResGetProduct) GetRequestURI() string {
	return s.RequestURI
}

// SetData sets the value of Data.
func (s *ResGetProduct) SetData(val []Product) {
	s.Data = val
}

// SetLimit sets the value of Limit.
func (s *ResGetProduct) SetLimit(val int) {
	s.Limit = val
}

// SetOffset sets the value of Offset.
func (s *ResGetProduct) SetOffset(val int) {
	s.Offset = val
}

// SetCount sets the value of Count.
func (s *ResGetProduct) SetCount(val int) {
	s.Count = val
}

// SetRequestURI sets the value of RequestURI.
func (s *ResGetProduct) SetRequestURI(val string) {
	s.RequestURI = val
}

func (*ResGetProduct) productGetRes() {}

type ResponseId struct {
	ID int `json:"id"`
}

// GetID returns the value of ID.
func (s *ResponseId) GetID() int {
	return s.ID
}

// SetID sets the value of ID.
func (s *ResponseId) SetID(val int) {
	s.ID = val
}

func (*ResponseId) productPostRes() {}
